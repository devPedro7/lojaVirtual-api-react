- NESTA ATIVIDADE IREMOS ESTAR CRIANDO UMA LOJA VIRTUAL UTILIZANDO UMA API CHAMADA FAKE-STORE-API;

- ESTA API POSSUI ALGUNS ENDPOINTS: PRODUCTS, CART, USERS, LOGIN TOKENS;

- O QUE VAMOS FAZER: LISTAGEM DE PRODUTOS E UM CARD PARA CADA PRODUTO E UM FILTRO;

- FLEX WRAP: SE NÃO HAVER ESPAÇO PARA O ELEMENTO, ELE JOGA PARA A LINHA DE BAIXO
----------------------------------------------------------------------------------------------------------

LISTAGEM DOS PRODUTOS - POPULAR:

- O ESTILO JÁ ESTÁ PREPARADO, A ESTRUTURA BASE COM OS <li> IRÃO AJUDAR A POPULAR;

- CRIANDO A REQUISIÇÃO:
    *PODEMOS CRIAR A REQUISIÇÃO ASSIM COMO NO JAVASCRIPT (fetchApi) PORÉM TEREMOS PROBLEMAS, POIS UMA APLICAÇÃO EM REACT TRABALHA COM REQUISIÇÕES A TODO MOMENTO, 
    COM O fetch TODA VEZ QUE A URL SOFRER ALTERAÇÃO, DARIA MUITO PROBLEMA NA MANUTENÇÃO.

    *PARA SOLUCIONAR ESTE PROBLEMA, IREMOS UTILIZAR UMA BIBLIOTECA QUE CONCENTRA A "BASE URL" E COM ISSO IREMOS REALIZAR REQUISIÇÕES DE UMA NOVA MANEIRA. A BIBLIOTECASE 
    CHAMA: "AXIOS". NO TERMINAL DIGITAR: npm install axios;

1º CRIAR UMA PASTA CHAMADA "services" E UM ARQUIVO CHAMADO "index.js"

2º CRIAR UMA CONSTANTE E EXPORTA-LA COM O NOME DE "API" E ESSA CONSTANTE VAI RECEBER UM "axios.create"

3º CORPO DO AXIOS: A CONSTANTE SERÁ UMA FUNÇÃO QUE RECEBERÁ UM OBJETO, DENTRO DESSE OBJETO SERÁ PASSADO UM PARAMETRO CHAMADO DE "baseUrl:" QUE É ONDE IREMOS DIZER DE ONDE
VIRÃO AS REQUISIÇÕES.

    3.1º BASE URL: SÃO AS INICIAIS DA URL DE CADA SITE. OS "/" SÃO CHAMADOS DE ENDPOINTS. NO BASEURL PASSAREMOS O BASE DO FAKESTORE QUE VAI ATÉ O "."

4º CRIAR A REQUISIÇÃO DENTRO DO NOSSO HOME. NÃO DEVEMOS UTILIZAR UMA STATE, POIS ELA RENDERIZA VÁRIAS VEZES. O MELHOR PARA O CASO DE REQUISIÇÕES É O USEEFECT, POIS ELE 
FAZ AS CHAMADAS APENAS UMA VEZ. O USE EFECT É FEITO NA PARTE LÓGICA DO COMPONENTE.

    4.1º O USEEFECT RECEBE UM AROWFUNCTION QUE É PRECEDIDA DE UM ARRAY DE DEPENDENCIAS. E TUDO QUE ESTÁ DENTRO DO SEU CORPO ACONTECE APENAS UMA VEZ QUANDO O COMPONENTE É
    RENDERIZADO;

5º CRIAR UMA FUNÇÃO QUE VAI RECEBER OS PRODUTOS DA API.

    5.1º DENTRO DO CORPO DA FUNÇÃO IREMOS CHAMAR A API QUE CRIAMOS NO JS (ONDE É PASSADO O baseUrl) 
    5.2º ESSE API FUNCIONA COMO SE FOSSE UMA REQUISIÇÃO, ENTÃO DAMOS UM "API.get() (POIS QUEREMOS PEGAR OS DADOS DA API)" ELE FUNCIONA COMO UM FETCH API
    5.3º IREMOS CONCATENAR O ENDPOINT NO baseUrl, TUDO O QUE ESTIVER DENTRO DOS PARENTESES DO baseUrl SERÁ CONCATENADO COM A baseUrl. E COLAREMOS O ENDPOINT QUE QUEREMOS
    O "/products". A VANTAGEM DO AXIOS É QUE ELE ISOLA A baseUrl POIS CASO OS ENDPOINTS MUDEM OU DÃO PROBLEMAS, NÓS MUDAMOS APENAS ELE, E NÃO UM TODO.

6º DENTRO USEEFECT CHAMAR A FUNÇÃO DE BUSCAR PRODUTOS (DEVEMOS OLHAR NO CONSOLE PARA VER SE ESTÁ RETORNANDO O 200) - SE ESTIVER RETORNANDO OK, MAS PRECISAMOS GUARDAR OS 
OBJETOS DA LISTA DENTRO DE ALGUM CANTO.

7º PARA GUARDAR OS PRODUTOS DEVEMOS UTILIZAR UM USESTATE, E DENTRO DOS PARAMETROS DO USESTATE DEVEMOS INICIAR UM ARRAY VAZIO.

8º POVOANDO A FUNÇÃO BUSAR PRODUTOS: 
    
    8.1º TRANSFORMAR NOSSO ENDPOINT EM UMA CONSTANTE: const request = await ........
    *O "await" FUNCIONA COMO UM THEN. O PRIMEIRO THEN É O RESPONSE DO JSON

    8.2º CRRIE UMA CONST COM O NOME DE "response" QUE IRÁ RECEBER UM await request.json()

    8.3º ALTERANDO O VALOR DE setProdutos: setProdutos(...response) e dar um log em products;

    8.4 SE DER UM ERRO, COMENTE O QUE ESTÁ ABAIXO DO ENDPOINT E COLOQUE UM CONSOLE.LOG PASSANDO O request

    8.5º ESTÁ DANDO ERRO POIS O PRIMEIRO REQUEST JÁ TRAZ OS VALORES DENTRO DELE. ENTÃO DENTRO DO setProdutos VOCÊ PASSA O request.data QUE JÁ IRÁ POVOAR A VARIÁVEL
    NO LOG AINDA VIRÁ VAZIO PQ NO CONTEXTO DO USESTATE ELE AINDA ESTÁ VAZIO. TEM QUE COLOCAR O LOG MAIS ABAIXO POIS A´´I ELE JÁ ESTARÁ PREENCHIDO. POIS DENTRO DO 
    USE STATE ELE AINDA ESTÁ COM O "VALOR ANTIGO"



